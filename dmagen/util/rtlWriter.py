def writeHeaderInfoComment(f, moduleName):
    from datetime import datetime
    now = datetime.now()
    f.write("//" + "-"*70 + '\n')
    f.write("//\n")
    f.write("//" + (moduleName + ".v").center(70) + '\n')
    f.write("//\n")
    f.write("//" + "(C) COPYRIGHT Belling Co., Lmt.".center(70) + '\n')
    f.write("//" + "ALL RIGHTS RESERVED".center(70) + '\n')
    f.write("//\n")
    f.write("//" + "This file is automatically generated by RTL generator".center(70) + '\n')
    f.write("//" + ' '*12 + "Time".ljust(20) + ": " + str(now.year) + "-" + str(now.month) +
            "-" + str(now.day) + " " + str(now.hour) + ":" + str(now.minute) + ":" +
            str(now.second) + '\n')
    f.write("//" + ' '*12 + "Author".ljust(20) + ": " + "Cheng Cai" + '\n')
    f.write("//" + ' '*12 + "Contact".ljust(20) + ": " + "caicheng@belling.com.cn" + '\n')
    f.write("//" + "-"*70 + '\n')

    
def writeModulePortList(f, moduleName, portList):
    f.write("module " + moduleName + "(\n")
    for i in range(len(portList)-1):
        _writePortLine(f, portList[i])
    _writePortLine(f=f, port=portList[-1], withComma=False)
    f.write(");\n")

def writeRegWireLine(f, regWire, indent=0, withSemiComma=True, withNextLine=True):
    if regWire[1] == 'r':
        rw = "reg"
    elif regWire[1] == 'w':
        rw = "wire"
    if regWire[2]>1:
        w = "[" + str(regWire[2]-1) + ":0]"
    else:
        w = ''
    f.write(' '*indent + rw.ljust(8) + w.ljust(8) + regWire[0].ljust(32) +
            (";" if withSemiComma else '') + ('\n' if withNextLine else ''))

def writeAssign(f, wireName, assignList, comment='', indent=0):
    if comment:
        f.write("// " + comment + '\n')
    assigneeString = ' '*indent + ("assign " + wireName).ljust(32) + " =     "
    assigneeLen = len(assigneeString)
    assignerString = ''
    for s in assignList:
        assignerString = assignerString + ' ' + s + (' '*assigneeLen if s=='\n' else '')
    f.write(assigneeString + assignerString + ';\n')

def writeFlop(f, clkName, rstnName, structList, comment=''):
    if comment:
        f.write("// " + comment + '\n')
    if clkName=='' and rstnName=='':
        f.write("always @(*) begin\n")
    else:
        f.write("always @(posedge " + clkName + " or negedge " + rstnName + ") begin\n")
    for s in structList:
        s.writeRtl(f, 4)
    f.write("end\n")

def writeRegAssign(f, regName, assignList, indent=0, nonBlocking=True):
    assigneeString = ' '*indent + regName.ljust(24) + (" <=   " if nonBlocking else " =    ")
    assigneeLen = len(assigneeString)
    assignerString = ''
    for s in assignList:
        assignerString = assignerString + ' ' + s + (' '*assigneeLen if s=='\n' else '')
    f.write(assigneeString + assignerString + ';\n')

def writeLocalParam(f, paramName, value, comment='', indent=0):
    if comment:
        f.write("// " + comment + '\n')
    f.write("localparam".ljust(12) + paramName.ljust(20) + " = ".ljust(4) + value + ';\n')

def writeInstancePortLine(f, portName, wireName, withComma=True):
    f.write(' '*4 + ("." + portName).ljust(24) + ("(" + wireName + ")").ljust(32) + ("," if withComma else '') + '\n')

class IfStruct(object):
    def __init__(self, cond, subStructList):
        self.subStructList = subStructList
        self.cond = cond

    def writeRtl(self, f, indent=0):
        f.write(' '*indent + "if (" + self.cond + ") begin\n")
        for s in self.subStructList:
            s.writeRtl(f=f, indent=indent+4)
        f.write(' '*indent + "end\n")

class ElifStruct(object):
    def __init__(self, cond, subStructList):
        self.subStructList = subStructList
        self.cond = cond

    def writeRtl(self, f, indent=0):
        f.write(' '*indent + "else if (" + self.cond + ") begin\n")
        for s in self.subStructList:
            s.writeRtl(f=f, indent=indent+4)
        f.write(' '*indent + "end\n")

class ElseStruct(object):
    def __init__(self, subStructList):
        self.subStructList = subStructList

    def writeRtl(self, f, indent=0):
        f.write(' '*indent + "else begin\n")
        for s in self.subStructList:
            s.writeRtl(f=f, indent=indent+4)
        f.write(' '*indent + "end\n")

class AssignStruct(object):
    def __init__(self, regName, assignList, nonBlocking=True):
        self.regName = regName
        self.assignList = assignList
        self.nonBlocking = nonBlocking

    def writeRtl(self, f, indent=0):
        writeRegAssign(f, self.regName, self.assignList, indent, self.nonBlocking)

class CaseStruct(object):
    def __init__(self, cond, branchDict):
        self.cond = cond
        self.branchDict = branchDict

    def writeRtl(self, f, indent=0):
        f.write(' '*indent + "case(" + self.cond + ")\n")
        for v,sList in self.branchDict.items():
            f.write(' '*(indent+4) + v + ": begin\n")
            for s in sList:
                s.writeRtl(f=f, indent=indent+8)
            f.write(' '*(indent+4) + "end\n")
        f.write(' '*indent + "endcase\n")
        
    

def _writePortLine(f, port, indent=4, withComma=True, withNextLine=True):
    if port[1] == 'c' or port[2] == 'c':
        f.write(' '*indent + "// " + port[0] + '\n')
    else:
        if port[2] == 'r':
            regWire = "reg"
        elif port[2] == 'w':
            regWire = "wire"
        if port[1] == 'i':
            inout = "input"
            regWire = "wire"
        elif port[1] == "o":
            inout = "output"
        if port[3]>1:
            w = "[" + str(port[3]-1) + ":0]"
        else:
            w = ''
        f.write(' '*indent + inout.ljust(8) + regWire.ljust(8) + w.ljust(8) + port[0].ljust(32) +
                ("," if withComma else '') + ('\n' if withNextLine else '')) 
    
        
